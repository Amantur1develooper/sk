from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import CommonCash, CashFlow, Allocation, Expense, Sale
from projects.models import Project, Block, EstimateItem
from employees.models import Employee, SalaryPayment
from django.db.models import Sum
from django.db.models import Sum, Q

@login_required
def common_cash_detail(request):
    common_cash = CommonCash.objects.first()
    cash_flows = CashFlow.objects.all().order_by('-date')

    # üîπ —Ñ–∏–ª—å—Ç—Ä—ã
    block_id = request.GET.get('block')
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')

    if block_id:
        cash_flows = cash_flows.filter(description__icontains=Block.objects.get(id=block_id).name)

    if start_date:
        cash_flows = cash_flows.filter(date__date__gte=parse_date(start_date))
    if end_date:
        cash_flows = cash_flows.filter(date__date__lte=parse_date(end_date))

    # üîπ –∏—Ç–æ–≥–∏
    total_income = cash_flows.filter(flow_type="income").aggregate(sum=Sum("amount"))["sum"] or 0
    total_expense = cash_flows.filter(flow_type="expense").aggregate(sum=Sum("amount"))["sum"] or 0
    net_balance = total_income - total_expense

    # üîπ —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
    if 'export' in request.GET:
        return export_cash_flows_to_excel(cash_flows)

    blocks = Block.objects.all()

    context = {
        'common_cash': common_cash,
        'cash_flows': cash_flows,
        'blocks': blocks,
        'selected_block': block_id,
        'start_date': start_date,
        'end_date': end_date,
        'total_income': total_income,
        'total_expense': total_expense,
        'net_balance': net_balance,
    }
    return render(request, 'finances/common_cash_detail.html', context)

@login_required
def dashboard(request):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    common_cash = CommonCash.objects.first()
    projects = Project.objects.all()
    total_projects = projects.count()
    total_blocks = Block.objects.count()
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_income = CashFlow.objects.filter(flow_type='income').aggregate(Sum('amount'))['amount__sum'] or 0
    total_expense = CashFlow.objects.filter(flow_type='expense').aggregate(Sum('amount'))['amount__sum'] or 0
    margin = total_income - total_expense
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    recent_operations = CashFlow.objects.all().order_by('-date')[:10]
    
    context = {
        'common_cash': common_cash,
        'projects': projects,
        'total_projects': total_projects,
        'total_blocks': total_blocks,
        'total_income': total_income,
        'total_expense': total_expense,
        'margin': margin,
        'recent_operations': recent_operations,
    }
    return render(request, 'finances/dashboard.html', context)
import datetime
from django.utils.dateparse import parse_date
from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from django.db.models import Q
from projects.models import Block
from .models import CommonCash, CashFlow

# @login_required
# def common_cash_detail(request):
#     common_cash = CommonCash.objects.first()
#     cash_flows = CashFlow.objects.all().order_by('-date')

#     # üîπ —Ñ–∏–ª—å—Ç—Ä—ã
#     block_id = request.GET.get('block')
#     start_date = request.GET.get('start_date')
#     end_date = request.GET.get('end_date')

#     if block_id:
#         cash_flows = cash_flows.filter(description__icontains=Block.objects.get(id=block_id).name)

#     if start_date:
#         cash_flows = cash_flows.filter(date__date__gte=parse_date(start_date))
#     if end_date:
#         cash_flows = cash_flows.filter(date__date__lte=parse_date(end_date))

#     # üîπ —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
#     if 'export' in request.GET:
#         return export_cash_flows_to_excel(cash_flows)

#     blocks = Block.objects.all()

#     context = {
#         'common_cash': common_cash,
#         'cash_flows': cash_flows,
#         'blocks': blocks,
#         'selected_block': block_id,
#         'start_date': start_date,
#         'end_date': end_date,
#     }
#     return render(request, 'finances/common_cash_detail.html', context)

import openpyxl
from io import BytesIO
from django.http import HttpResponse

def export_cash_flows_to_excel(cash_flows):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Cash Flows"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    ws.append(["–î–∞—Ç–∞", "–¢–∏–ø", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"])

    # –î–∞–Ω–Ω—ã–µ
    for flow in cash_flows:
        ws.append([
            flow.date.strftime("%d.%m.%Y %H:%M"),
            "–ü—Ä–∏—Ö–æ–¥" if flow.flow_type == "income" else "–†–∞—Å—Ö–æ–¥",
            float(flow.amount),
            flow.description,
        ])

    # –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å
    buffer = BytesIO()
    wb.save(buffer)
    buffer.seek(0)

    # HTTP-–æ—Ç–≤–µ—Ç
    response = HttpResponse(
        buffer.getvalue(),
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    response['Content-Disposition'] = 'attachment; filename=cash_flows.xlsx'
    return response

# def export_cash_flows_to_excel(cash_flows):
#     wb = openpyxl.Workbook()
#     ws = wb.active
#     ws.title = "–î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤"

#     headers = ["–î–∞—Ç–∞", "–¢–∏–ø", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
#     ws.append(headers)

#     for flow in cash_flows:
#         ws.append([
#             flow.date.strftime("%d.%m.%Y %H:%M"),
#             "–ü—Ä–∏—Ö–æ–¥" if flow.flow_type == "income" else "–†–∞—Å—Ö–æ–¥",
#             float(flow.amount),
#             flow.description
#         ])

#     # —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
#     for col_num, _ in enumerate(headers, 1):
#         ws.column_dimensions[get_column_letter(col_num)].width = 20

#     response = HttpResponse(
#         content=openpyxl.writer.excel.save_virtual_workbook(wb),
#         content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
#     )
#     response['Content-Disposition'] = 'attachment; filename="cash_flows.xlsx"'
#     return response

# @login_required
# def common_cash_detail(request):
#     common_cash = CommonCash.objects.first()
#     cash_flows = CashFlow.objects.all().order_by('-date')
    
#     context = {
#         'common_cash': common_cash,
#         'cash_flows': cash_flows,
#     }
#     return render(request, 'finances/common_cash_detail.html', context)

@login_required
def allocations_list(request):
    allocations = Allocation.objects.all().order_by('-date')
    
    context = {
        'allocations': allocations,
    }
    return render(request, 'finances/allocations_list.html', context)

@login_required
def expenses_list(request):
    expenses = Expense.objects.all().order_by('-date')
    
    context = {
        'expenses': expenses,
    }
    return render(request, 'finances/expenses_list.html', context)

@login_required
def sales_list(request):
    sales = Sale.objects.all().order_by('-date')
    
    context = {
        'sales': sales,
    }
    return render(request, 'finances/sales_list.html', context)


from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db import transaction
from .forms import AllocationForm
from .models import CommonCash, CashFlow, Allocation
from projects.models import EstimateItem

@login_required
@transaction.atomic
def create_allocation(request):
    common_cash = CommonCash.objects.first()
    
    if request.method == 'POST':
        form = AllocationForm(request.POST)
        if form.is_valid():
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤
                allocation = form.save(commit=False)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ
                if common_cash.balance < allocation.amount:
                    messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ')
                    return render(request, 'finances/allocation_form.html', {'form': form})
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –¥–µ–Ω–µ–≥ (—Ä–∞—Å—Ö–æ–¥)
                cash_flow = CashFlow.objects.create(
                    common_cash=common_cash,
                    flow_type='expense',
                    amount=allocation.amount,
                    description=f"–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: {allocation.description}",
                    created_by=request.user
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
                allocation.common_cash = common_cash
                allocation.save()
                
                messages.success(request, f'–°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {allocation.amount} —Å–æ–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–µ–ª–µ–Ω—ã!')
                # return redirect('finances:allocations_list')
                return redirect('finances:common_cash_detail')
                
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤: {str(e)}')
    else:
        form = AllocationForm()
    
    context = {
        'form': form,
        'common_cash': common_cash,
    }
    return render(request, 'finances/allocation_form.html', context)