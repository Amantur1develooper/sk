from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import CommonCash, CashFlow, Allocation, Expense, Sale
from projects.models import Project, Block, EstimateItem
from employees.models import Employee, SalaryPayment
from django.db.models import Sum
from django.db.models import Sum, Q
from django.db.models import Q
from django.utils.dateparse import parse_date
from projects.models import Block

@login_required
def common_cash_detail(request):
    common_cash = CommonCash.objects.first()
    cash_flows = CashFlow.objects.all().order_by('-date')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    blocks = Block.objects.all()

    # –§–∏–ª—å—Ç—Ä—ã –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞
    flow_type = request.GET.get("flow_type")   # 'income' –∏–ª–∏ 'expense'
    block_id = request.GET.get("block")
    start_date = request.GET.get("start_date")
    end_date = request.GET.get("end_date")

    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    if flow_type in ["income", "expense"]:
        cash_flows = cash_flows.filter(flow_type=flow_type)

    # –§–∏–ª—å—Ç—Ä –ø–æ –±–ª–æ–∫—É
    if block_id:
        cash_flows = cash_flows.filter(block_id=block_id)

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    if start_date:
        cash_flows = cash_flows.filter(date__date__gte=start_date)
    if end_date:
        cash_flows = cash_flows.filter(date__date__lte=end_date)

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    if "export" in request.GET:
        return export_cash_flows_to_excel(cash_flows)
    
    total_income = cash_flows.filter(flow_type="income").aggregate(Sum("amount"))["amount__sum"] or 0
    total_expense = cash_flows.filter(flow_type="expense").aggregate(Sum("amount"))["amount__sum"] or 0
    net_balance = total_income - total_expense
    
    context = {
        'common_cash': common_cash,
        'cash_flows': cash_flows,
        'blocks': blocks,
        
        
        
        'total_income': total_income,
        'total_expense': total_expense,
        'net_balance': net_balance,
    }
    
    
    return render(request, 'finances/common_cash_detail.html', context)
from django.shortcuts import render, get_object_or_404, redirect
from .models import Block, EstimateItem, CommonCash, Allocation
from .forms import AllocationForm

def allocation_create(request):
    common_cash = get_object_or_404(CommonCash, pk=1)
    blocks = Block.objects.all()
    block_id = request.GET.get("block")

    form = None
    if block_id:
        estimate_items = EstimateItem.objects.filter(block_id=block_id)
        if request.method == "POST":
            form = AllocationForm(request.POST)
            form.fields["estimate_item"].queryset = estimate_items
            if form.is_valid():
                allocation = form.save(commit=False)
                allocation.save()
                return redirect("finances:allocations_list")
        else:
            form = AllocationForm()
            form.fields["estimate_item"].queryset = estimate_items

    context = {
        "common_cash": common_cash,
        "blocks": blocks,
        "block_id": int(block_id) if block_id else None,
        "form": form,
    }
    return render(request, "finances/allocation_create.html", context)

# @login_required
# def common_cash_detail(request):
#     common_cash = CommonCash.objects.first()
#     cash_flows = CashFlow.objects.all().order_by('-date')

#     # –§–∏–ª—å—Ç—Ä—ã –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞
#     flow_type = request.GET.get("flow_type")   # 'income' –∏–ª–∏ 'expense'
#     block_id = request.GET.get("block")
#     start_date = request.GET.get("start_date")
#     end_date = request.GET.get("end_date")

#     # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
#     if flow_type in ["income", "expense"]:
#         cash_flows = cash_flows.filter(flow_type=flow_type)

#     # –§–∏–ª—å—Ç—Ä –ø–æ –±–ª–æ–∫—É (–∏—â–µ–º –±–ª–æ–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏!)
#     if block_id:
#         cash_flows = cash_flows.filter(description__icontains=f"–±–ª–æ–∫ {block_id}")

#     # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
#     if start_date:
#         cash_flows = cash_flows.filter(date__date__gte=parse_date(start_date))
#     if end_date:
#         cash_flows = cash_flows.filter(date__date__lte=parse_date(end_date))

#     # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
#     if "export" in request.GET:
#         return export_cash_flows_to_excel(cash_flows)

#     context = {
#         'common_cash': common_cash,
#         'cash_flows': cash_flows,
#     }
#     return render(request, 'finances/common_cash_detail.html', context)


# @login_required
# def common_cash_detail(request):
#     common_cash = CommonCash.objects.first()
#     cash_flows = CashFlow.objects.all().order_by('-date')

#     # üîπ —Ñ–∏–ª—å—Ç—Ä—ã
#     block_id = request.GET.get('block')
#     start_date = request.GET.get('start_date')
#     end_date = request.GET.get('end_date')

#     if block_id:
#         cash_flows = cash_flows.filter(description__icontains=Block.objects.get(id=block_id).name)

#     if start_date:
#         cash_flows = cash_flows.filter(date__date__gte=parse_date(start_date))
#     if end_date:
#         cash_flows = cash_flows.filter(date__date__lte=parse_date(end_date))

#     # üîπ –∏—Ç–æ–≥–∏
#     total_income = cash_flows.filter(flow_type="income").aggregate(sum=Sum("amount"))["sum"] or 0
#     total_expense = cash_flows.filter(flow_type="expense").aggregate(sum=Sum("amount"))["sum"] or 0
#     net_balance = total_income - total_expense

#     # üîπ —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
#     if 'export' in request.GET:
#         return export_cash_flows_to_excel(cash_flows)

#     blocks = Block.objects.all()

#     context = {
#         'common_cash': common_cash,
#         'cash_flows': cash_flows,
#         'blocks': blocks,
#         'selected_block': block_id,
#         'start_date': start_date,
#         'end_date': end_date,
#         'total_income': total_income,
#         'total_expense': total_expense,
#         'net_balance': net_balance,
#     }
#     return render(request, 'finances/common_cash_detail.html', context)

@login_required
def dashboard(request):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    common_cash = CommonCash.objects.first()
    projects = Project.objects.all()
    total_projects = projects.count()
    total_blocks = Block.objects.count()
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_income = CashFlow.objects.filter(flow_type='income').aggregate(Sum('amount'))['amount__sum'] or 0
    total_expense = CashFlow.objects.filter(flow_type='expense').aggregate(Sum('amount'))['amount__sum'] or 0
    margin = total_income - total_expense
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    recent_operations = CashFlow.objects.all().order_by('-date')[:10]
    
    context = {
        'common_cash': common_cash,
        'projects': projects,
        'total_projects': total_projects,
        'total_blocks': total_blocks,
        'total_income': total_income,
        'total_expense': total_expense,
        'margin': margin,
        'recent_operations': recent_operations,
    }
    return render(request, 'finances/dashboard.html', context)
import datetime
from django.utils.dateparse import parse_date
from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from django.db.models import Q
from projects.models import Block
from .models import CommonCash, CashFlow

# @login_required
# def common_cash_detail(request):
#     common_cash = CommonCash.objects.first()
#     cash_flows = CashFlow.objects.all().order_by('-date')

#     # üîπ —Ñ–∏–ª—å—Ç—Ä—ã
#     block_id = request.GET.get('block')
#     start_date = request.GET.get('start_date')
#     end_date = request.GET.get('end_date')

#     if block_id:
#         cash_flows = cash_flows.filter(description__icontains=Block.objects.get(id=block_id).name)

#     if start_date:
#         cash_flows = cash_flows.filter(date__date__gte=parse_date(start_date))
#     if end_date:
#         cash_flows = cash_flows.filter(date__date__lte=parse_date(end_date))

#     # üîπ —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
#     if 'export' in request.GET:
#         return export_cash_flows_to_excel(cash_flows)

#     blocks = Block.objects.all()

#     context = {
#         'common_cash': common_cash,
#         'cash_flows': cash_flows,
#         'blocks': blocks,
#         'selected_block': block_id,
#         'start_date': start_date,
#         'end_date': end_date,
#     }
#     return render(request, 'finances/common_cash_detail.html', context)

import openpyxl
from io import BytesIO
from django.http import HttpResponse
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill
from io import BytesIO
from django.http import HttpResponse
from datetime import datetime

def export_cash_flows_to_excel(cash_flows):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Cash Flows"

    # üîπ –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["–î–∞—Ç–∞", "–¢–∏–ø", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ë–ª–æ–∫", "–°–æ–∑–¥–∞–ª"]
    ws.append(headers)

    # üîπ –°—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(bold=True, color="FFFFFF")
    header_fill = PatternFill(start_color="4F81BD", end_color="4F81BD", fill_type="solid")
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_num)
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = Alignment(horizontal="center")

    # üîπ –î–∞–Ω–Ω—ã–µ
    for flow in cash_flows:
        ws.append([
            flow.date.strftime("%d.%m.%Y %H:%M"),
            "–ü—Ä–∏—Ö–æ–¥" if flow.flow_type == "income" else "–†–∞—Å—Ö–æ–¥",
            float(flow.amount),
            flow.description,
            flow.block.name if flow.block else "‚Äî",            # –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
            flow.created_by.get_full_name() or flow.created_by.username,  # –§–ò–û –∏–ª–∏ username
        ])

    # üîπ –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    for column_cells in ws.columns:
        length = max(len(str(cell.value)) if cell.value else 0 for cell in column_cells)
        ws.column_dimensions[column_cells[0].column_letter].width = length + 2

    # üîπ –ò—Ç–æ–≥–∏
    total_income = sum(f.amount for f in cash_flows if f.flow_type == "income")
    total_expense = sum(f.amount for f in cash_flows if f.flow_type == "expense")
    net_balance = total_income - total_expense

    ws.append([])
    ws.append(["", "–ò–¢–û–ì–û:"])
    ws.append(["", "–û–±—â–∏–π –ø—Ä–∏—Ö–æ–¥", float(total_income)])
    ws.append(["", "–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥", float(total_expense)])
    ws.append(["", "–†–∞–∑–Ω–∏—Ü–∞", float(net_balance)])

    # üîπ –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å
    buffer = BytesIO()
    wb.save(buffer)
    buffer.seek(0)

    # üîπ –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
    filename = f"cash_flows_{datetime.now().strftime('%d-%m-%Y')}.xlsx"

    # üîπ HTTP-–æ—Ç–≤–µ—Ç
    response = HttpResponse(
        buffer.getvalue(),
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    response['Content-Disposition'] = f'attachment; filename={filename}'
    return response

# def export_cash_flows_to_excel(cash_flows):
#     wb = openpyxl.Workbook()
#     ws = wb.active
#     ws.title = "Cash Flows"

#     # –ó–∞–≥–æ–ª–æ–≤–∫–∏
#     ws.append(["–î–∞—Ç–∞", "–¢–∏–ø", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"])

#     # –î–∞–Ω–Ω—ã–µ
#     for flow in cash_flows:
#         ws.append([
#             flow.date.strftime("%d.%m.%Y %H:%M"),
#             "–ü—Ä–∏—Ö–æ–¥" if flow.flow_type == "income" else "–†–∞—Å—Ö–æ–¥",
#             float(flow.amount),
#             flow.description,
#         ])

#     # –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å
#     buffer = BytesIO()
#     wb.save(buffer)
#     buffer.seek(0)

#     # HTTP-–æ—Ç–≤–µ—Ç
#     response = HttpResponse(
#         buffer.getvalue(),
#         content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#     )
#     response['Content-Disposition'] = 'attachment; filename=cash_flows.xlsx'
#     return response

# def export_cash_flows_to_excel(cash_flows):
#     wb = openpyxl.Workbook()
#     ws = wb.active
#     ws.title = "–î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤"

#     headers = ["–î–∞—Ç–∞", "–¢–∏–ø", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
#     ws.append(headers)

#     for flow in cash_flows:
#         ws.append([
#             flow.date.strftime("%d.%m.%Y %H:%M"),
#             "–ü—Ä–∏—Ö–æ–¥" if flow.flow_type == "income" else "–†–∞—Å—Ö–æ–¥",
#             float(flow.amount),
#             flow.description
#         ])

#     # —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
#     for col_num, _ in enumerate(headers, 1):
#         ws.column_dimensions[get_column_letter(col_num)].width = 20

#     response = HttpResponse(
#         content=openpyxl.writer.excel.save_virtual_workbook(wb),
#         content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
#     )
#     response['Content-Disposition'] = 'attachment; filename="cash_flows.xlsx"'
#     return response

# @login_required
# def common_cash_detail(request):
#     common_cash = CommonCash.objects.first()
#     cash_flows = CashFlow.objects.all().order_by('-date')
    
#     context = {
#         'common_cash': common_cash,
#         'cash_flows': cash_flows,
#     }
#     return render(request, 'finances/common_cash_detail.html', context)

@login_required
def allocations_list(request):
    allocations = Allocation.objects.all().order_by('-date')
    
    context = {
        'allocations': allocations,
    }
    return render(request, 'finances/allocations_list.html', context)

@login_required
def expenses_list(request):
    expenses = Expense.objects.all().order_by('-date')
    
    context = {
        'expenses': expenses,
    }
    return render(request, 'finances/expenses_list.html', context)

@login_required
def sales_list(request):
    sales = Sale.objects.all().order_by('-date')
    
    context = {
        'sales': sales,
    }
    return render(request, 'finances/sales_list.html', context)


from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db import transaction
from .forms import AllocationForm
from .models import CommonCash, CashFlow, Allocation
from projects.models import EstimateItem


# views.py
from projects.models import Block
# finances/views.py (—á–∞—Å—Ç—å)
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import AllocationForm
from .models import CommonCash, CashFlow, Allocation
from projects.models import Block, EstimateItem
from django.shortcuts import render, get_object_or_404, redirect
from .models import Block, EstimateItem, CommonCash, Allocation
from .forms import AllocationForm

def allocation_create(request):
    common_cash = CommonCash.objects.first()
    blocks = Block.objects.all()
    block_id = request.GET.get("block")

    form = None
    if block_id:
        estimate_items = EstimateItem.objects.filter(block_id=block_id)
        print(f"Block ID: {block_id}, Found items: {estimate_items.count()}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        if request.method == "POST":
            form = AllocationForm(request.POST)
            form.fields["estimate_item"].queryset = estimate_items
            if form.is_valid():
                allocation = form.save(commit=False)
                # allocation = form.save(commit=False)

                # if common_cash.balance < allocation.amount:
                #     messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ')
                #     return render(request, 'finances/allocation_form.html', {'form': form, 'common_cash': common_cash, 'blocks': blocks, 'block_id': block_id})

                # —Å–æ–∑–¥–∞—ë–º CashFlow –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º block –∏–∑ estimate_item
                cash_flow = CashFlow.objects.create(
                    common_cash=common_cash,
                    flow_type='expense',
                    amount=allocation.amount,
                    block=allocation.estimate_item.block,
                    description=f"–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: {allocation.description}",
                    created_by=request.user
                )

                allocation.common_cash = common_cash
                allocation.save()

                messages.success(request, f'–°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {allocation.amount} —Å–æ–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–µ–ª–µ–Ω—ã!')
    
                return redirect("finances:common_cash_detail")
        else:
            form = AllocationForm()
            form.fields["estimate_item"].queryset = estimate_items

    context = {
        "common_cash": common_cash,
        "blocks": blocks,
        "block_id": int(block_id) if block_id else None,
        "form": form,
    }
    return render(request, "finances/allocation_create.html", context)

# def create_allocation(request):
#     common_cash = CommonCash.objects.first()
#     blocks = Block.objects.all()
#     block_id = request.GET.get('block')  # —Ñ–∏–ª—å—Ç—Ä –ø–æ –±–ª–æ–∫—É –≤ GET

#     # –ù–∞ GET: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–¥—Ä–µ–∑–∞–µ–º queryset –ø–æ–∑–∏—Ü–∏–π –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –±–ª–æ–∫
#     if request.method == 'GET':
#         form = AllocationForm()
#         if block_id:
#             form.fields['estimate_item'].queryset = EstimateItem.objects.filter(block_id=block_id)
#     else:
#         # POST
#         form = AllocationForm(request.POST)
#         # –≤–∞–∂–Ω–æ: —á—Ç–æ–±—ã –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ queryset –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
#         # –æ—Å—Ç–∞–≤–∏–º –ø–æ–ª–Ω—ã–π queryset (–∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–µ–∑–∞—Ç—å –∫–∞–∫ –≤—ã—à–µ)
#         form.fields['estimate_item'].queryset = EstimateItem.objects.select_related('block', 'category').all()

#         if form.is_valid():
#             try:
#                 allocation = form.save(commit=False)

#                 if common_cash.balance < allocation.amount:
#                     messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ')
#                     return render(request, 'finances/allocation_form.html', {'form': form, 'common_cash': common_cash, 'blocks': blocks, 'block_id': block_id})

#                 # —Å–æ–∑–¥–∞—ë–º CashFlow –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º block –∏–∑ estimate_item
#                 cash_flow = CashFlow.objects.create(
#                     common_cash=common_cash,
#                     flow_type='expense',
#                     amount=allocation.amount,
#                     block=allocation.estimate_item.block,
#                     description=f"–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: {allocation.description}",
#                     created_by=request.user
#                 )

#                 allocation.common_cash = common_cash
#                 allocation.save()

#                 messages.success(request, f'–°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {allocation.amount} —Å–æ–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–µ–ª–µ–Ω—ã!')
                
#                 return redirect('finances:common_cash_detail')
            
#             except Exception as e:
#                 messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤: {str(e)}')

#     return render(request, 'finances/allocation_form.html', {
#         'form': form,
#         'common_cash': common_cash,
#         'blocks': blocks,
#         'block_id': int(block_id) if block_id else None
#     })

# def create_allocation(request):
#     common_cash = CommonCash.objects.first()
#     block_id = request.GET.get("block")

#     if request.method == 'POST':
#         form = AllocationForm(request.POST)
#         if form.is_valid():
#             allocation = form.save(commit=False)

#             if common_cash.balance < allocation.amount:
#                 messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ')
#                 return render(request, 'finances/allocation_form.html', {'form': form, 'common_cash': common_cash})

#             cash_flow = CashFlow.objects.create(
#                 common_cash=common_cash,
#                 flow_type='expense',
#                 amount=allocation.amount,
#                 block=allocation.estimate_item.block,
#                 description=f"–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: {allocation.description}",
#                 created_by=request.user
#             )
#             allocation.common_cash = common_cash
#             allocation.save()
#             messages.success(request, f'–°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {allocation.amount} —Å–æ–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–µ–ª–µ–Ω—ã!')
#             return redirect('finances:common_cash_detail')
#     else:
#         form = AllocationForm()

#     # —Ñ–∏–ª—å—Ç—Ä—É–µ–º estimate_item –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –±–ª–æ–∫
#     if block_id:
#         form.fields['estimate_item'].queryset = form.fields['estimate_item'].queryset.filter(block_id=block_id)

#     blocks = Block.objects.all()
#     return render(request, 'finances/allocation_form.html', {
#         'form': form,
#         'common_cash': common_cash,
#         'blocks': blocks,
#         'block_id': int(block_id) if block_id else None
#     })
from django.http import JsonResponse

# finances/views.py
from django.http import JsonResponse
from django.db.models import Q
from projects.models import EstimateItem
from django.http import JsonResponse
from .models import EstimateItem

def get_estimate_items(request):
    block_id = request.GET.get("block_id")
    items = EstimateItem.objects.filter(block_id=block_id).values("id", "name") if block_id else []
    return JsonResponse(list(items), safe=False)

def get_estimate_items3(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Å–º–µ—Ç—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã GET:
      - q: —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      - block_id: id –±–ª–æ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    q = request.GET.get('q', '').strip()
    block_id = request.GET.get('block_id')

    qs = EstimateItem.objects.select_related('block', 'category').all()

    if block_id:
        qs = qs.filter(block_id=block_id)

    if q:
        qs = qs.filter(
            Q(name__icontains=q) |
            Q(block__name__icontains=q) |
            Q(category__name__icontains=q)
        )

    # –ª–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    items = []
    for it in qs[:200]:
        display = f"{it.block.name} ‚Äî {it.category.name} ‚Äî {it.name}"
        items.append({'id': it.id, 'text': display})

    return JsonResponse({'results': items})

# def get_estimate_items(request):
#     block_id = request.GET.get("block_id")
#     items = EstimateItem.objects.filter(block_id=block_id).values("id", "name")
#     return JsonResponse(list(items), safe=False)

# @login_required
# @transaction.atomic
# def create_allocation(request):
#     common_cash = CommonCash.objects.first()
    
#     if request.method == 'POST':
#         form = AllocationForm(request.POST)
#         if form.is_valid():
#             try:
#                 # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤
#                 allocation = form.save(commit=False)
                
#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ
#                 if common_cash.balance < allocation.amount:
#                     messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ')
#                     return render(request, 'finances/allocation_form.html', {'form': form})
                
#                 # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –¥–µ–Ω–µ–≥ (—Ä–∞—Å—Ö–æ–¥)
#                 cash_flow = CashFlow.objects.create(
#                     common_cash=common_cash,
#                     flow_type='expense',
#                     amount=allocation.amount,
#                     block=allocation.estimate_item.block,  
#                     description=f"–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: {allocation.description}",
#                     created_by=request.user
#                 )
                
#                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
#                 allocation.common_cash = common_cash
#                 allocation.save()
                
#                 messages.success(request, f'–°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {allocation.amount} —Å–æ–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–µ–ª–µ–Ω—ã!')
#                 # return redirect('finances:allocations_list')
#                 return redirect('finances:common_cash_detail')
                
#             except Exception as e:
#                 messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤: {str(e)}')
#     else:
#         form = AllocationForm()
    
#     context = {
#         'form': form,
#         'common_cash': common_cash,
#     }
#     return render(request, 'finances/allocation_form.html', context)


from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .forms import LoanForm, LoanPaymentForm
from .models import Loan, LoanPayment

@login_required
def loans_list(request):
    loans = Loan.objects.all().order_by('-issued_date')
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∑–∞–π–º–∞
    loan_type = request.GET.get('type')
    if loan_type in ['given', 'taken']:
        loans = loans.filter(loan_type=loan_type)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status = request.GET.get('status')
    if status in ['active', 'repaid', 'overdue']:
        loans = loans.filter(status=status)
    
    context = {
        'loans': loans,
        'current_type': loan_type,
        'current_status': status,
    }
    return render(request, 'finances/loans_list.html', context)

@login_required
def loan_detail(request, loan_id):
    loan = get_object_or_404(Loan, id=loan_id)
    payments = loan.payments.all().order_by('-payment_date')
    
    context = {
        'loan': loan,
        'payments': payments,
    }
    return render(request, 'finances/loan_detail.html', context)

@login_required
def create_loan(request):
    common_cash = CommonCash.objects.first()
    
    if request.method == 'POST':
        form = LoanForm(request.POST)
        if form.is_valid():
            loan = form.save(commit=False)
            loan.common_cash = common_cash
            loan.created_by = request.user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–∞–π–º–∞
            if loan.loan_type == 'given' and common_cash.balance < loan.amount:
                messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–∞–π–º–∞')
                return render(request, 'finances/loan_form.html', {'form': form})
            
            loan.save()
            messages.success(request, '–ó–∞–π–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
            return redirect('finances:loans_list')
    else:
        form = LoanForm()
    
    context = {
        'form': form,
        'common_cash': common_cash,
    }
    return render(request, 'finances/loan_form.html', context)

@login_required
def add_loan_payment(request, loan_id):
    loan = get_object_or_404(Loan, id=loan_id)
    common_cash = loan.common_cash
    
    if request.method == 'POST':
        form = LoanPaymentForm(request.POST)
        if form.is_valid():
            payment = form.save(commit=False)
            payment.loan = loan
            payment.created_by = request.user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∑–∞–π–º–∞
            if loan.loan_type == 'taken' and common_cash.balance < payment.amount:
                messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –û–±—â–∞–≥–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–π–º–∞')
                return render(request, 'finances/loan_payment_form.html', {'form': form, 'loan': loan})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∑–∞–π–º—É
            if payment.amount > loan.remaining_amount:
                messages.error(request, f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∑–∞–π–º—É: {loan.remaining_amount}')
                return render(request, 'finances/loan_payment_form.html', {'form': form, 'loan': loan})
            
            payment.save()
            messages.success(request, '–ü–ª–∞—Ç–µ–∂ –ø–æ –∑–∞–π–º—É —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
            return redirect('finances:loan_detail', loan_id=loan.id)
    else:
        form = LoanPaymentForm()
    
    context = {
        'form': form,
        'loan': loan,
    }
    return render(request, 'finances/loan_payment_form.html', context)